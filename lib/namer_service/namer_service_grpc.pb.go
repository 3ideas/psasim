// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package namer_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamerServiceClient is the client API for NamerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamerServiceClient interface {
	GetName(ctx context.Context, in *ComponentAlias, opts ...grpc.CallOption) (*GetNameResponse, error)
	GetNameWithHierarchy(ctx context.Context, in *ComponentAlias, opts ...grpc.CallOption) (*GetNameWithHierarchyResponse, error)
	RenameComponent(ctx context.Context, in *RenameComponentRequest, opts ...grpc.CallOption) (*RenameComponentResponse, error)
	MoveComponent(ctx context.Context, in *MoveComponentRequest, opts ...grpc.CallOption) (*MoveComponentResponse, error)
	CreateAttribute(ctx context.Context, in *CreateAttributeRequest, opts ...grpc.CallOption) (*CreateAttributeResponse, error)
	UpdateAttribute(ctx context.Context, in *UpdateAttributeRequest, opts ...grpc.CallOption) (*UpdateAttributeResponse, error)
	CreateComponent(ctx context.Context, in *CreateComponentRequest, opts ...grpc.CallOption) (*CreateComponentResponse, error)
	RollbackAll(ctx context.Context, in *RollbackAllRequest, opts ...grpc.CallOption) (*RollbackAllResponse, error)
	GetNumberOfChanges(ctx context.Context, in *GetNumberOfChangesRequest, opts ...grpc.CallOption) (*GetNumberOfChangesResponse, error)
	GetAttributeValue(ctx context.Context, in *GetAttributeValueRequest, opts ...grpc.CallOption) (*GetAttributeValueResponse, error)
	GetComponentClass(ctx context.Context, in *GetComponentClassRequest, opts ...grpc.CallOption) (*GetComponentClassResponse, error)
	SetRollbackPoint(ctx context.Context, in *SetRollbackPointRequest, opts ...grpc.CallOption) (*SetRollbackPointResponse, error)
	RollbackToPoint(ctx context.Context, in *RollbackToPointRequest, opts ...grpc.CallOption) (*RollbackToPointResponse, error)
	GetComponentByID(ctx context.Context, in *ComponentID, opts ...grpc.CallOption) (*ComponentInfoResponse, error)
	GetChildrenInfoByID(ctx context.Context, in *ComponentID, opts ...grpc.CallOption) (*GetChildrenByIDResponse, error)
	GetComponentInfo(ctx context.Context, in *ComponentAlias, opts ...grpc.CallOption) (*ComponentInfoResponse, error)
	GetHierarchyByAlias(ctx context.Context, in *GetHierarchyByAliasRequest, opts ...grpc.CallOption) (*GetHierarchyByAliasResponse, error)
}

type namerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamerServiceClient(cc grpc.ClientConnInterface) NamerServiceClient {
	return &namerServiceClient{cc}
}

func (c *namerServiceClient) GetName(ctx context.Context, in *ComponentAlias, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetNameWithHierarchy(ctx context.Context, in *ComponentAlias, opts ...grpc.CallOption) (*GetNameWithHierarchyResponse, error) {
	out := new(GetNameWithHierarchyResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetNameWithHierarchy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) RenameComponent(ctx context.Context, in *RenameComponentRequest, opts ...grpc.CallOption) (*RenameComponentResponse, error) {
	out := new(RenameComponentResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/RenameComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) MoveComponent(ctx context.Context, in *MoveComponentRequest, opts ...grpc.CallOption) (*MoveComponentResponse, error) {
	out := new(MoveComponentResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/MoveComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) CreateAttribute(ctx context.Context, in *CreateAttributeRequest, opts ...grpc.CallOption) (*CreateAttributeResponse, error) {
	out := new(CreateAttributeResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/CreateAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) UpdateAttribute(ctx context.Context, in *UpdateAttributeRequest, opts ...grpc.CallOption) (*UpdateAttributeResponse, error) {
	out := new(UpdateAttributeResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/UpdateAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) CreateComponent(ctx context.Context, in *CreateComponentRequest, opts ...grpc.CallOption) (*CreateComponentResponse, error) {
	out := new(CreateComponentResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/CreateComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) RollbackAll(ctx context.Context, in *RollbackAllRequest, opts ...grpc.CallOption) (*RollbackAllResponse, error) {
	out := new(RollbackAllResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/RollbackAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetNumberOfChanges(ctx context.Context, in *GetNumberOfChangesRequest, opts ...grpc.CallOption) (*GetNumberOfChangesResponse, error) {
	out := new(GetNumberOfChangesResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetNumberOfChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetAttributeValue(ctx context.Context, in *GetAttributeValueRequest, opts ...grpc.CallOption) (*GetAttributeValueResponse, error) {
	out := new(GetAttributeValueResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetAttributeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetComponentClass(ctx context.Context, in *GetComponentClassRequest, opts ...grpc.CallOption) (*GetComponentClassResponse, error) {
	out := new(GetComponentClassResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetComponentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) SetRollbackPoint(ctx context.Context, in *SetRollbackPointRequest, opts ...grpc.CallOption) (*SetRollbackPointResponse, error) {
	out := new(SetRollbackPointResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/SetRollbackPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) RollbackToPoint(ctx context.Context, in *RollbackToPointRequest, opts ...grpc.CallOption) (*RollbackToPointResponse, error) {
	out := new(RollbackToPointResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/RollbackToPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetComponentByID(ctx context.Context, in *ComponentID, opts ...grpc.CallOption) (*ComponentInfoResponse, error) {
	out := new(ComponentInfoResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetComponentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetChildrenInfoByID(ctx context.Context, in *ComponentID, opts ...grpc.CallOption) (*GetChildrenByIDResponse, error) {
	out := new(GetChildrenByIDResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetChildrenInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetComponentInfo(ctx context.Context, in *ComponentAlias, opts ...grpc.CallOption) (*ComponentInfoResponse, error) {
	out := new(ComponentInfoResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetComponentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namerServiceClient) GetHierarchyByAlias(ctx context.Context, in *GetHierarchyByAliasRequest, opts ...grpc.CallOption) (*GetHierarchyByAliasResponse, error) {
	out := new(GetHierarchyByAliasResponse)
	err := c.cc.Invoke(ctx, "/namer_service.NamerService/GetHierarchyByAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamerServiceServer is the server API for NamerService service.
// All implementations must embed UnimplementedNamerServiceServer
// for forward compatibility
type NamerServiceServer interface {
	GetName(context.Context, *ComponentAlias) (*GetNameResponse, error)
	GetNameWithHierarchy(context.Context, *ComponentAlias) (*GetNameWithHierarchyResponse, error)
	RenameComponent(context.Context, *RenameComponentRequest) (*RenameComponentResponse, error)
	MoveComponent(context.Context, *MoveComponentRequest) (*MoveComponentResponse, error)
	CreateAttribute(context.Context, *CreateAttributeRequest) (*CreateAttributeResponse, error)
	UpdateAttribute(context.Context, *UpdateAttributeRequest) (*UpdateAttributeResponse, error)
	CreateComponent(context.Context, *CreateComponentRequest) (*CreateComponentResponse, error)
	RollbackAll(context.Context, *RollbackAllRequest) (*RollbackAllResponse, error)
	GetNumberOfChanges(context.Context, *GetNumberOfChangesRequest) (*GetNumberOfChangesResponse, error)
	GetAttributeValue(context.Context, *GetAttributeValueRequest) (*GetAttributeValueResponse, error)
	GetComponentClass(context.Context, *GetComponentClassRequest) (*GetComponentClassResponse, error)
	SetRollbackPoint(context.Context, *SetRollbackPointRequest) (*SetRollbackPointResponse, error)
	RollbackToPoint(context.Context, *RollbackToPointRequest) (*RollbackToPointResponse, error)
	GetComponentByID(context.Context, *ComponentID) (*ComponentInfoResponse, error)
	GetChildrenInfoByID(context.Context, *ComponentID) (*GetChildrenByIDResponse, error)
	GetComponentInfo(context.Context, *ComponentAlias) (*ComponentInfoResponse, error)
	GetHierarchyByAlias(context.Context, *GetHierarchyByAliasRequest) (*GetHierarchyByAliasResponse, error)
	mustEmbedUnimplementedNamerServiceServer()
}

// UnimplementedNamerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamerServiceServer struct {
}

func (UnimplementedNamerServiceServer) GetName(context.Context, *ComponentAlias) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedNamerServiceServer) GetNameWithHierarchy(context.Context, *ComponentAlias) (*GetNameWithHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameWithHierarchy not implemented")
}
func (UnimplementedNamerServiceServer) RenameComponent(context.Context, *RenameComponentRequest) (*RenameComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameComponent not implemented")
}
func (UnimplementedNamerServiceServer) MoveComponent(context.Context, *MoveComponentRequest) (*MoveComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveComponent not implemented")
}
func (UnimplementedNamerServiceServer) CreateAttribute(context.Context, *CreateAttributeRequest) (*CreateAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttribute not implemented")
}
func (UnimplementedNamerServiceServer) UpdateAttribute(context.Context, *UpdateAttributeRequest) (*UpdateAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttribute not implemented")
}
func (UnimplementedNamerServiceServer) CreateComponent(context.Context, *CreateComponentRequest) (*CreateComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponent not implemented")
}
func (UnimplementedNamerServiceServer) RollbackAll(context.Context, *RollbackAllRequest) (*RollbackAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackAll not implemented")
}
func (UnimplementedNamerServiceServer) GetNumberOfChanges(context.Context, *GetNumberOfChangesRequest) (*GetNumberOfChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberOfChanges not implemented")
}
func (UnimplementedNamerServiceServer) GetAttributeValue(context.Context, *GetAttributeValueRequest) (*GetAttributeValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributeValue not implemented")
}
func (UnimplementedNamerServiceServer) GetComponentClass(context.Context, *GetComponentClassRequest) (*GetComponentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentClass not implemented")
}
func (UnimplementedNamerServiceServer) SetRollbackPoint(context.Context, *SetRollbackPointRequest) (*SetRollbackPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRollbackPoint not implemented")
}
func (UnimplementedNamerServiceServer) RollbackToPoint(context.Context, *RollbackToPointRequest) (*RollbackToPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackToPoint not implemented")
}
func (UnimplementedNamerServiceServer) GetComponentByID(context.Context, *ComponentID) (*ComponentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentByID not implemented")
}
func (UnimplementedNamerServiceServer) GetChildrenInfoByID(context.Context, *ComponentID) (*GetChildrenByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildrenInfoByID not implemented")
}
func (UnimplementedNamerServiceServer) GetComponentInfo(context.Context, *ComponentAlias) (*ComponentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentInfo not implemented")
}
func (UnimplementedNamerServiceServer) GetHierarchyByAlias(context.Context, *GetHierarchyByAliasRequest) (*GetHierarchyByAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHierarchyByAlias not implemented")
}
func (UnimplementedNamerServiceServer) mustEmbedUnimplementedNamerServiceServer() {}

// UnsafeNamerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamerServiceServer will
// result in compilation errors.
type UnsafeNamerServiceServer interface {
	mustEmbedUnimplementedNamerServiceServer()
}

func RegisterNamerServiceServer(s grpc.ServiceRegistrar, srv NamerServiceServer) {
	s.RegisterService(&NamerService_ServiceDesc, srv)
}

func _NamerService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetName(ctx, req.(*ComponentAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetNameWithHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetNameWithHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetNameWithHierarchy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetNameWithHierarchy(ctx, req.(*ComponentAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_RenameComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).RenameComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/RenameComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).RenameComponent(ctx, req.(*RenameComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_MoveComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).MoveComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/MoveComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).MoveComponent(ctx, req.(*MoveComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_CreateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).CreateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/CreateAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).CreateAttribute(ctx, req.(*CreateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_UpdateAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).UpdateAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/UpdateAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).UpdateAttribute(ctx, req.(*UpdateAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_CreateComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).CreateComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/CreateComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).CreateComponent(ctx, req.(*CreateComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_RollbackAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).RollbackAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/RollbackAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).RollbackAll(ctx, req.(*RollbackAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetNumberOfChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumberOfChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetNumberOfChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetNumberOfChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetNumberOfChanges(ctx, req.(*GetNumberOfChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetAttributeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetAttributeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetAttributeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetAttributeValue(ctx, req.(*GetAttributeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetComponentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetComponentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetComponentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetComponentClass(ctx, req.(*GetComponentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_SetRollbackPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRollbackPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).SetRollbackPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/SetRollbackPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).SetRollbackPoint(ctx, req.(*SetRollbackPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_RollbackToPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackToPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).RollbackToPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/RollbackToPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).RollbackToPoint(ctx, req.(*RollbackToPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetComponentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetComponentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetComponentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetComponentByID(ctx, req.(*ComponentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetChildrenInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetChildrenInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetChildrenInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetChildrenInfoByID(ctx, req.(*ComponentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetComponentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentAlias)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetComponentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetComponentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetComponentInfo(ctx, req.(*ComponentAlias))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamerService_GetHierarchyByAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHierarchyByAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamerServiceServer).GetHierarchyByAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namer_service.NamerService/GetHierarchyByAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamerServiceServer).GetHierarchyByAlias(ctx, req.(*GetHierarchyByAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamerService_ServiceDesc is the grpc.ServiceDesc for NamerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "namer_service.NamerService",
	HandlerType: (*NamerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _NamerService_GetName_Handler,
		},
		{
			MethodName: "GetNameWithHierarchy",
			Handler:    _NamerService_GetNameWithHierarchy_Handler,
		},
		{
			MethodName: "RenameComponent",
			Handler:    _NamerService_RenameComponent_Handler,
		},
		{
			MethodName: "MoveComponent",
			Handler:    _NamerService_MoveComponent_Handler,
		},
		{
			MethodName: "CreateAttribute",
			Handler:    _NamerService_CreateAttribute_Handler,
		},
		{
			MethodName: "UpdateAttribute",
			Handler:    _NamerService_UpdateAttribute_Handler,
		},
		{
			MethodName: "CreateComponent",
			Handler:    _NamerService_CreateComponent_Handler,
		},
		{
			MethodName: "RollbackAll",
			Handler:    _NamerService_RollbackAll_Handler,
		},
		{
			MethodName: "GetNumberOfChanges",
			Handler:    _NamerService_GetNumberOfChanges_Handler,
		},
		{
			MethodName: "GetAttributeValue",
			Handler:    _NamerService_GetAttributeValue_Handler,
		},
		{
			MethodName: "GetComponentClass",
			Handler:    _NamerService_GetComponentClass_Handler,
		},
		{
			MethodName: "SetRollbackPoint",
			Handler:    _NamerService_SetRollbackPoint_Handler,
		},
		{
			MethodName: "RollbackToPoint",
			Handler:    _NamerService_RollbackToPoint_Handler,
		},
		{
			MethodName: "GetComponentByID",
			Handler:    _NamerService_GetComponentByID_Handler,
		},
		{
			MethodName: "GetChildrenInfoByID",
			Handler:    _NamerService_GetChildrenInfoByID_Handler,
		},
		{
			MethodName: "GetComponentInfo",
			Handler:    _NamerService_GetComponentInfo_Handler,
		},
		{
			MethodName: "GetHierarchyByAlias",
			Handler:    _NamerService_GetHierarchyByAlias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib/namer_service/namer_service.proto",
}
